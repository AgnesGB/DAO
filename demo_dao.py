"""
Demonstra√ß√£o pr√°tica do uso do Padr√£o DAO implementado
Este arquivo mostra como utilizar as funcionalidades implementadas
"""

from app.dao import DAOFactory
from app.services import CategoriaService, ProdutoService
from app.dominio import Categoria, Produto


def demonstrar_uso_dao():
    """Demonstra o uso direto dos DAOs"""
    print("=== DEMONSTRA√á√ÉO: Uso Direto dos DAOs ===\n")
    
    # 1. Usando Factory para obter DAOs
    categoria_dao = DAOFactory.get_categoria_dao()
    produto_dao = DAOFactory.get_produto_dao()
    
    # 2. Opera√ß√µes com Categoria
    print("üìÇ Trabalhando com Categorias:")
    
    # Criar categoria
    categoria = Categoria(id=None, descricao="Exemplo DAO")
    categoria_dao.incluir(categoria)
    print("   ‚úÖ Categoria criada")
    
    # Listar categorias
    categorias = categoria_dao.selecionar_todos()
    categoria_criada = None
    for cat in categorias:
        if cat.descricao == "Exemplo DAO":
            categoria_criada = cat
            print(f"   üìã Categoria encontrada: ID {cat.id} - {cat.descricao}")
            break
    
    # 3. Opera√ß√µes com Produto
    if categoria_criada:
        print("\nüì¶ Trabalhando com Produtos:")
        
        # Criar produto
        produto = Produto(
            id=None,
            descricao="Produto Exemplo",
            preco_unitario=25.50,
            quantidade_estoque=15,
            categoria=categoria_criada
        )
        produto_dao.incluir(produto)
        print("   ‚úÖ Produto criado")
        
        # Buscar produtos da categoria
        produtos_categoria = produto_dao.selecionar_por_categoria(categoria_criada.id)
        print(f"   üìã {len(produtos_categoria)} produtos na categoria")
        
        # Buscar por descri√ß√£o
        produtos_encontrados = produto_dao.buscar_por_descricao("Exemplo")
        print(f"   üîç {len(produtos_encontrados)} produtos encontrados na busca")
        
        # Limpeza
        for prod in produtos_categoria:
            produto_dao.excluir(prod)
        print("   üóëÔ∏è Produtos removidos")
    
    # Limpeza final
    if categoria_criada:
        categoria_dao.excluir(categoria_criada)
        print("   üóëÔ∏è Categoria removida")


def demonstrar_uso_services():
    """Demonstra o uso dos Services (camada recomendada)"""
    print("\n=== DEMONSTRA√á√ÉO: Uso dos Services (Recomendado) ===\n")
    
    # 1. Instanciar Services
    categoria_service = CategoriaService()
    produto_service = ProdutoService()
    
    # 2. Opera√ß√µes com valida√ß√µes
    print("üìÇ Categorias com Valida√ß√µes:")
    
    try:
        # Criar categoria v√°lida
        categoria_service.criar_categoria("Tecnologia")
        print("   ‚úÖ Categoria 'Tecnologia' criada")
        
        # Tentar criar categoria duplicada (valida√ß√£o deve impedir)
        try:
            categoria_service.criar_categoria("Tecnologia")
        except ValueError as e:
            print(f"   ‚ö†Ô∏è Valida√ß√£o funcionando: {e}")
        
        # Tentar criar categoria vazia (valida√ß√£o deve impedir)
        try:
            categoria_service.criar_categoria("")
        except ValueError as e:
            print(f"   ‚ö†Ô∏è Valida√ß√£o funcionando: {e}")
        
        # Buscar categoria criada
        categorias = categoria_service.listar_todas()
        categoria_tecnologia = None
        for cat in categorias:
            if cat.descricao == "Tecnologia":
                categoria_tecnologia = cat
                break
        
        if categoria_tecnologia:
            print("\nüì¶ Produtos com Valida√ß√µes:")
            
            # Criar produto v√°lido
            produto_service.criar_produto(
                descricao="Smartphone Android",
                preco_unitario=899.99,
                quantidade_estoque=5,
                categoria_id=categoria_tecnologia.id
            )
            print("   ‚úÖ Produto 'Smartphone Android' criado")
            
            # Tentar criar produto com pre√ßo inv√°lido
            try:
                produto_service.criar_produto(
                    descricao="Produto Inv√°lido",
                    preco_unitario=-50.0,  # Pre√ßo negativo
                    quantidade_estoque=1,
                    categoria_id=categoria_tecnologia.id
                )
            except ValueError as e:
                print(f"   ‚ö†Ô∏è Valida√ß√£o funcionando: {e}")
            
            # Tentar criar produto com estoque negativo
            try:
                produto_service.criar_produto(
                    descricao="Produto Inv√°lido 2",
                    preco_unitario=100.0,
                    quantidade_estoque=-5,  # Estoque negativo
                    categoria_id=categoria_tecnologia.id
                )
            except ValueError as e:
                print(f"   ‚ö†Ô∏è Valida√ß√£o funcionando: {e}")
            
            # 3. Funcionalidades especiais
            print("\nüìä Funcionalidades Especiais:")
            
            # Buscar produtos por descri√ß√£o
            produtos_android = produto_service.buscar_por_descricao("Android")
            print(f"   üîç {len(produtos_android)} produtos com 'Android' encontrados")
            
            # Verificar estoque baixo
            produtos_estoque_baixo = produto_service.verificar_estoque_baixo(10)
            print(f"   üìâ {len(produtos_estoque_baixo)} produtos com estoque baixo")
            
            # Calcular valor total do estoque
            valor_total = produto_service.calcular_valor_total_estoque()
            print(f"   üí∞ Valor total do estoque: R$ {valor_total:.2f}")
            
            # Limpeza
            produtos = produto_service.listar_todos()
            for produto in produtos:
                if produto.categoria.id == categoria_tecnologia.id:
                    produto_service.excluir_produto(produto.id)
            print("   üóëÔ∏è Produtos da demonstra√ß√£o removidos")
            
            # Excluir categoria
            categoria_service.excluir_categoria(categoria_tecnologia.id)
            print("   üóëÔ∏è Categoria removida")


def demonstrar_seguranca():
    """Demonstra as funcionalidades de seguran√ßa implementadas"""
    print("\n=== DEMONSTRA√á√ÉO: Seguran√ßa e Robustez ===\n")
    
    print("üîí Seguran√ßa Implementada:")
    print("   ‚úÖ Prepared Statements (previne SQL Injection)")
    print("   ‚úÖ Valida√ß√£o de tipos de dados")
    print("   ‚úÖ Valida√ß√£o de regras de neg√≥cio")
    print("   ‚úÖ Tratamento de exce√ß√µes com logging")
    print("   ‚úÖ Transa√ß√µes com rollback autom√°tico")
    print("   ‚úÖ Conex√µes thread-safe (Singleton)")
    
    # Demonstrar prepared statements
    print("\nüõ°Ô∏è Prepared Statements em A√ß√£o:")
    categoria_service = CategoriaService()
    
    # Tentar inserir dados que poderiam ser maliciosos em SQL injection
    descricao_maliciosa = "'; DROP TABLE Categoria; --"
    
    try:
        categoria_service.criar_categoria(descricao_maliciosa)
        print("   ‚úÖ Dados 'maliciosos' inseridos com seguran√ßa")
        
        # Verificar se os dados foram inseridos corretamente
        categorias = categoria_service.listar_todas()
        categoria_encontrada = None
        for cat in categorias:
            if cat.descricao == descricao_maliciosa:
                categoria_encontrada = cat
                break
        
        if categoria_encontrada:
            print(f"   ‚úÖ Dados preservados integralmente: '{categoria_encontrada.descricao}'")
            categoria_service.excluir_categoria(categoria_encontrada.id)
            print("   üóëÔ∏è Dados de teste removidos")
        
    except Exception as e:
        print(f"   ‚ùå Erro inesperado: {e}")


def main():
    """Executa todas as demonstra√ß√µes"""
    print("üéØ DEMONSTRA√á√ÉO COMPLETA DO PADR√ÉO DAO")
    print("=" * 60)
    
    # Executar demonstra√ß√µes
    demonstrar_uso_dao()
    demonstrar_uso_services()
    demonstrar_seguranca()
    
    print("\n" + "=" * 60)
    print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("\nüìö Resumo do que foi implementado:")
    print("‚Ä¢ Padr√£o DAO com interface abstrata e implementa√ß√µes concretas")
    print("‚Ä¢ Factory para cria√ß√£o de objetos DAO")
    print("‚Ä¢ Singleton para gerenciamento de conex√µes")
    print("‚Ä¢ Service Layer com l√≥gica de neg√≥cio e valida√ß√µes")
    print("‚Ä¢ Prepared Statements para seguran√ßa contra SQL Injection")
    print("‚Ä¢ Tratamento robusto de exce√ß√µes")
    print("‚Ä¢ Valida√ß√µes de dados e regras de neg√≥cio")
    print("‚Ä¢ Funcionalidades avan√ßadas de consulta e relat√≥rios")
    
    print("\n‚ú® O projeto agora segue as melhores pr√°ticas de desenvolvimento!")


if __name__ == "__main__":
    main()

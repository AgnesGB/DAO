"""
Demonstra√ß√£o pr√°tica do uso do Padr√£o DAO implementado
"""

from app.dao import DAOFactory
from app.services import CategoriaService, ProdutoService
from app.dominio import Categoria, Produto


def demonstrar_dao_basico():
    """Demonstra o uso b√°sico dos DAOs"""
    print("=== DEMONSTRA√á√ÉO B√ÅSICA DO PADR√ÉO DAO ===\n")
    
    # Usando Factory para obter DAOs
    categoria_dao = DAOFactory.get_categoria_dao()
    produto_dao = DAOFactory.get_produto_dao()
    
    print("üìÇ Testando CategoriaDAO:")
    
    # Criar categoria
    categoria = Categoria(id=None, descricao="Demo DAO")
    categoria_dao.incluir(categoria)
    print("   ‚úÖ Categoria criada")
    
    # Listar categorias
    categorias = categoria_dao.selecionar_todos()
    print(f"   üìã {len(categorias)} categorias no total")
    
    # Encontrar categoria criada
    categoria_criada = None
    for cat in categorias:
        if cat.descricao == "Demo DAO":
            categoria_criada = cat
            break
    
    if categoria_criada:
        print(f"   ‚úÖ Categoria encontrada: ID {categoria_criada.id}")
        
        print("\nüì¶ Testando ProdutoDAO:")
        
        # Criar produto
        produto = Produto(
            id=None,
            descricao="Produto Demo",
            preco_unitario=50.0,
            quantidade_estoque=10,
            categoria=categoria_criada
        )
        produto_dao.incluir(produto)
        print("   ‚úÖ Produto criado")
        
        # Buscar produtos
        produtos = produto_dao.selecionar_todos()
        print(f"   üìã {len(produtos)} produtos no total")
        
        # Buscar por categoria
        produtos_categoria = produto_dao.selecionar_por_categoria(categoria_criada.id)
        print(f"   üîç {len(produtos_categoria)} produtos na categoria")
        
        # Limpeza
        for prod in produtos_categoria:
            produto_dao.excluir(prod)
        categoria_dao.excluir(categoria_criada)
        print("   üóëÔ∏è Dados de teste removidos")


def demonstrar_services():
    """Demonstra o uso dos Services com valida√ß√µes"""
    print("\n=== DEMONSTRA√á√ÉO DOS SERVICES ===\n")
    
    categoria_service = CategoriaService()
    produto_service = ProdutoService()
    
    print("üìÇ Testando CategoriaService:")
    
    # Criar categoria v√°lida
    categoria_service.criar_categoria("Inform√°tica")
    print("   ‚úÖ Categoria 'Inform√°tica' criada")
    
    # Testar valida√ß√£o de duplica√ß√£o
    try:
        categoria_service.criar_categoria("Inform√°tica")
        print("   ‚ùå Valida√ß√£o falhou")
    except ValueError as e:
        print(f"   ‚úÖ Valida√ß√£o funcionou: {e}")
    
    # Buscar categoria
    categorias = categoria_service.listar_todas()
    categoria_info = None
    for cat in categorias:
        if cat.descricao == "Inform√°tica":
            categoria_info = cat
            break
    
    if categoria_info:
        print("\nüì¶ Testando ProdutoService:")
        
        # Criar produto v√°lido
        produto_service.criar_produto(
            descricao="Notebook",
            preco_unitario=2500.00,
            quantidade_estoque=3,
            categoria_id=categoria_info.id
        )
        print("   ‚úÖ Produto 'Notebook' criado")
        
        # Testar valida√ß√£o de pre√ßo
        try:
            produto_service.criar_produto(
                descricao="Produto Inv√°lido",
                preco_unitario=-100.0,  # Pre√ßo negativo
                quantidade_estoque=1,
                categoria_id=categoria_info.id
            )
        except ValueError as e:
            print(f"   ‚úÖ Valida√ß√£o de pre√ßo funcionou: {e}")
        
        # Funcionalidades especiais
        produtos_encontrados = produto_service.buscar_por_descricao("Notebook")
        print(f"   üîç {len(produtos_encontrados)} produtos encontrados na busca")
        
        estoque_baixo = produto_service.verificar_estoque_baixo(5)
        print(f"   üìâ {len(estoque_baixo)} produtos com estoque baixo")
        
        valor_total = produto_service.calcular_valor_total_estoque()
        print(f"   üí∞ Valor total do estoque: R$ {valor_total:.2f}")
        
        # Limpeza
        produtos = produto_service.listar_todos()
        for produto in produtos:
            if produto.categoria.id == categoria_info.id:
                produto_service.excluir_produto(produto.id)
        categoria_service.excluir_categoria(categoria_info.id)
        print("   üóëÔ∏è Dados de teste removidos")


def demonstrar_seguranca():
    """Demonstra a seguran√ßa implementada"""
    print("\n=== DEMONSTRA√á√ÉO DE SEGURAN√áA ===\n")
    
    print("üîí Recursos de Seguran√ßa Implementados:")
    print("   ‚úÖ Prepared Statements (previne SQL Injection)")
    print("   ‚úÖ Valida√ß√£o de tipos de dados")
    print("   ‚úÖ Valida√ß√£o de regras de neg√≥cio")
    print("   ‚úÖ Tratamento de exce√ß√µes")
    print("   ‚úÖ Transa√ß√µes com rollback")
    print("   ‚úÖ Conex√µes thread-safe")
    
    # Testar prote√ß√£o contra SQL Injection
    categoria_service = CategoriaService()
    descricao_maliciosa = "'; DROP TABLE Categoria; --"
    
    categoria_service.criar_categoria(descricao_maliciosa)
    print(f"\nüõ°Ô∏è Dados maliciosos inseridos com seguran√ßa: '{descricao_maliciosa}'")
    
    # Verificar se os dados foram preservados
    categorias = categoria_service.listar_todas()
    for cat in categorias:
        if cat.descricao == descricao_maliciosa:
            categoria_service.excluir_categoria(cat.id)
            print("   ‚úÖ Dados maliciosos removidos com seguran√ßa")
            break


def main():
    """Executa todas as demonstra√ß√µes"""
    print("üéØ DEMONSTRA√á√ÉO COMPLETA DO PADR√ÉO DAO")
    print("=" * 60)
    
    demonstrar_dao_basico()
    demonstrar_services()
    demonstrar_seguranca()
    
    print("\n" + "=" * 60)
    print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("\nüìö Padr√µes Implementados:")
    print("‚Ä¢ DAO Pattern com interface abstrata")
    print("‚Ä¢ Factory Pattern para cria√ß√£o de DAOs")
    print("‚Ä¢ Singleton Pattern para conex√µes")
    print("‚Ä¢ Service Layer Pattern para l√≥gica de neg√≥cio")
    print("‚Ä¢ Prepared Statements para seguran√ßa")
    print("‚Ä¢ Exception Handling robusto")
    print("\n‚ú® Projeto implementado com sucesso!")


if __name__ == "__main__":
    main()

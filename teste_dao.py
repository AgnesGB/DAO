"""
Testes para validar a implementa√ß√£o do padr√£o DAO
Execute este arquivo para testar as funcionalidades implementadas
"""

import sys
import os
import logging

# Adicionar o diret√≥rio da aplica√ß√£o ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.dao import DAOFactory
from app.services import CategoriaService, ProdutoService
from app.dominio import Categoria, Produto
from app.singleton import get_database_connection

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def teste_conexao_singleton():
    """Testa se o padr√£o Singleton est√° funcionando corretamente"""
    print("\n=== TESTE: Padr√£o Singleton ===")
    
    # Criar m√∫ltiplas inst√¢ncias
    db1 = get_database_connection()
    db2 = get_database_connection()
    
    # Verificar se s√£o a mesma inst√¢ncia
    if id(db1) == id(db2):
        print("‚úÖ Singleton funcionando corretamente - mesma inst√¢ncia")
    else:
        print("‚ùå Singleton falhou - inst√¢ncias diferentes")
    
    # Testar conex√£o
    try:
        conexao = db1.get_connection()
        print("‚úÖ Conex√£o com banco de dados estabelecida")
    except Exception as e:
        print(f"‚ùå Erro ao conectar: {e}")


def teste_categoria_dao():
    """Testa as opera√ß√µes CRUD do CategoriaDAO"""
    print("\n=== TESTE: CategoriaDAO ===")
    
    try:
        dao = DAOFactory.get_categoria_dao()
        
        # Criar categoria de teste
        categoria_teste = Categoria(id=None, descricao="Categoria Teste DAO")
        
        # Teste: Incluir
        print("üîÑ Testando inclus√£o...")
        dao.incluir(categoria_teste)
        print("‚úÖ Categoria inclu√≠da com sucesso")
        
        # Teste: Listar todas
        print("üîÑ Testando listagem...")
        categorias = dao.selecionar_todos()
        print(f"‚úÖ {len(categorias)} categorias encontradas")
        
        # Encontrar a categoria criada
        categoria_criada = None
        for cat in categorias:
            if cat.descricao == "Categoria Teste DAO":
                categoria_criada = cat
                break
        
        if categoria_criada:
            print(f"‚úÖ Categoria encontrada - ID: {categoria_criada.id}")
            
            # Teste: Selecionar um
            print("üîÑ Testando sele√ß√£o por ID...")
            categoria_selecionada = dao.selecionar_um(categoria_criada.id)
            if categoria_selecionada:
                print("‚úÖ Categoria selecionada com sucesso")
            else:
                print("‚ùå Erro ao selecionar categoria")
            
            # Teste: Alterar
            print("üîÑ Testando altera√ß√£o...")
            categoria_criada.descricao = "Categoria Teste DAO - Alterada"
            dao.alterar(categoria_criada)
            print("‚úÖ Categoria alterada com sucesso")
            
            # Teste: Excluir
            print("üîÑ Testando exclus√£o...")
            dao.excluir(categoria_criada)
            print("‚úÖ Categoria exclu√≠da com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro no teste CategoriaDAO: {e}")


def teste_categoria_service():
    """Testa as opera√ß√µes da CategoriaService"""
    print("\n=== TESTE: CategoriaService ===")
    
    try:
        service = CategoriaService()
        
        # Teste: Criar categoria
        print("üîÑ Testando cria√ß√£o via service...")
        service.criar_categoria("Eletr√¥nicos Teste")
        print("‚úÖ Categoria criada com sucesso")
        
        # Teste: Listar todas
        categorias = service.listar_todas()
        categoria_criada = None
        for cat in categorias:
            if cat.descricao == "Eletr√¥nicos Teste":
                categoria_criada = cat
                break
        
        if categoria_criada:
            print(f"‚úÖ Categoria encontrada - ID: {categoria_criada.id}")
            
            # Teste: Atualizar
            print("üîÑ Testando atualiza√ß√£o...")
            service.atualizar_categoria(categoria_criada.id, "Eletr√¥nicos Teste - Atualizada")
            print("‚úÖ Categoria atualizada com sucesso")
            
            # Teste: Valida√ß√£o - descri√ß√£o duplicada
            print("üîÑ Testando valida√ß√£o de duplica√ß√£o...")
            try:
                service.criar_categoria("Eletr√¥nicos Teste - Atualizada")
                print("‚ùå Valida√ß√£o de duplica√ß√£o falhou")
            except ValueError:
                print("‚úÖ Valida√ß√£o de duplica√ß√£o funcionando")
            
            # Teste: Excluir
            print("üîÑ Testando exclus√£o...")
            service.excluir_categoria(categoria_criada.id)
            print("‚úÖ Categoria exclu√≠da com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro no teste CategoriaService: {e}")


def teste_produto_dao():
    """Testa as opera√ß√µes CRUD do ProdutoDAO"""
    print("\n=== TESTE: ProdutoDAO ===")
    
    try:
        categoria_dao = DAOFactory.get_categoria_dao()
        produto_dao = DAOFactory.get_produto_dao()
        
        # Criar categoria para o teste
        categoria_teste = Categoria(id=None, descricao="Categoria para Produto Teste")
        categoria_dao.incluir(categoria_teste)
        
        # Buscar a categoria criada
        categorias = categoria_dao.selecionar_todos()
        categoria_criada = None
        for cat in categorias:
            if cat.descricao == "Categoria para Produto Teste":
                categoria_criada = cat
                break
        
        if categoria_criada:
            # Criar produto de teste
            produto_teste = Produto(
                id=None,
                descricao="Produto Teste DAO",
                preco_unitario=99.99,
                quantidade_estoque=10,
                categoria=categoria_criada
            )
            
            # Teste: Incluir produto
            print("üîÑ Testando inclus√£o de produto...")
            produto_dao.incluir(produto_teste)
            print("‚úÖ Produto inclu√≠do com sucesso")
            
            # Teste: Listar produtos
            produtos = produto_dao.selecionar_todos()
            produto_criado = None
            for prod in produtos:
                if prod.descricao == "Produto Teste DAO":
                    produto_criado = prod
                    break
            
            if produto_criado:
                print(f"‚úÖ Produto encontrado - ID: {produto_criado.id}")
                
                # Teste: Alterar produto
                produto_criado.descricao = "Produto Teste DAO - Alterado"
                produto_criado.preco_unitario = 149.99
                produto_dao.alterar(produto_criado)
                print("‚úÖ Produto alterado com sucesso")
                
                # Teste: Buscar por categoria
                produtos_categoria = produto_dao.selecionar_por_categoria(categoria_criada.id)
                print(f"‚úÖ {len(produtos_categoria)} produtos encontrados na categoria")
                
                # Teste: Excluir produto
                produto_dao.excluir(produto_criado)
                print("‚úÖ Produto exclu√≠do com sucesso")
            
            # Limpar categoria de teste
            categoria_dao.excluir(categoria_criada)
        
    except Exception as e:
        print(f"‚ùå Erro no teste ProdutoDAO: {e}")


def teste_produto_service():
    """Testa as opera√ß√µes da ProdutoService"""
    print("\n=== TESTE: ProdutoService ===")
    
    try:
        categoria_service = CategoriaService()
        produto_service = ProdutoService()
        
        # Criar categoria para teste
        categoria_service.criar_categoria("Livros Teste")
        categorias = categoria_service.listar_todas()
        categoria_criada = None
        for cat in categorias:
            if cat.descricao == "Livros Teste":
                categoria_criada = cat
                break
        
        if categoria_criada:
            # Teste: Criar produto
            print("üîÑ Testando cria√ß√£o de produto...")
            produto_service.criar_produto(
                descricao="Livro de Python",
                preco_unitario=89.90,
                quantidade_estoque=5,
                categoria_id=categoria_criada.id
            )
            print("‚úÖ Produto criado com sucesso")
            
            # Encontrar produto criado
            produtos = produto_service.listar_todos()
            produto_criado = None
            for prod in produtos:
                if prod.descricao == "Livro de Python":
                    produto_criado = prod
                    break
            
            if produto_criado:
                # Teste: Valida√ß√µes
                print("üîÑ Testando valida√ß√µes...")
                try:
                    produto_service.criar_produto("", 10.0, 1, categoria_criada.id)
                    print("‚ùå Valida√ß√£o de descri√ß√£o vazia falhou")
                except ValueError:
                    print("‚úÖ Valida√ß√£o de descri√ß√£o vazia funcionando")
                
                try:
                    produto_service.criar_produto("Teste", -10.0, 1, categoria_criada.id)
                    print("‚ùå Valida√ß√£o de pre√ßo negativo falhou")
                except ValueError:
                    print("‚úÖ Valida√ß√£o de pre√ßo negativo funcionando")
                
                # Teste: Busca
                produtos_encontrados = produto_service.buscar_por_descricao("Python")
                print(f"‚úÖ {len(produtos_encontrados)} produtos encontrados na busca")
                
                # Teste: Estoque baixo
                produtos_estoque_baixo = produto_service.verificar_estoque_baixo(10)
                print(f"‚úÖ {len(produtos_estoque_baixo)} produtos com estoque baixo")
                
                # Limpeza
                produto_service.excluir_produto(produto_criado.id)
                print("‚úÖ Produto exclu√≠do")
            
            categoria_service.excluir_categoria(categoria_criada.id)
        
    except Exception as e:
        print(f"‚ùå Erro no teste ProdutoService: {e}")


def main():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTES DO PADR√ÉO DAO")
    print("=" * 50)
    
    # Executar testes
    teste_conexao_singleton()
    teste_categoria_dao()
    teste_categoria_service()
    teste_produto_dao()
    teste_produto_service()
    
    print("\n" + "=" * 50)
    print("‚úÖ TESTES CONCLU√çDOS!")
    print("\nO padr√£o DAO foi implementado com sucesso e inclui:")
    print("‚Ä¢ Camada DAO com interface abstrata")
    print("‚Ä¢ Implementa√ß√µes concretas (CategoriaDAO, ProdutoDAO)")
    print("‚Ä¢ Factory para cria√ß√£o de DAOs")
    print("‚Ä¢ Camada de Servi√ßos com regras de neg√≥cio")
    print("‚Ä¢ Singleton para gerenciamento de conex√µes")
    print("‚Ä¢ Prepared statements para seguran√ßa")
    print("‚Ä¢ Tratamento de exce√ß√µes")
    print("‚Ä¢ Valida√ß√µes de dados")


if __name__ == "__main__":
    main()
